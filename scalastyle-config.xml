<!--
  ~ Licensed to the Apache Software Foundation (ASF) under one or more
  ~ contributor license agreements.  See the NOTICE file distributed with
  ~ this work for additional information regarding copyright ownership.
  ~ The ASF licenses this file to You under the Apache License, Version 2.0
  ~ (the "License"); you may not use this file except in compliance with
  ~ the License.  You may obtain a copy of the License at
  ~
  ~    http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<!--

If you wish to turn off checking for a section of code, you can put a comment in the source
before and after the section, with the following syntax:

  // scalastyle:off
  ...  // stuff that breaks the styles
  // scalastyle:on

You can also disable only one rule, by specifying its rule id, as specified in:
  http://www.scalastyle.org/rules-1.0.0.html

  // scalastyle:off no.finalize
  override def finalize(): Unit = ...
  // scalastyle:on no.finalize

This file is divided into 3 sections:
 (1) rules that we enforce.
 (2) rules that we would like to enforce, but haven't cleaned up the codebase to turn on yet
     (or we need to make the scalastyle rule more configurable).
 (3) rules that we don't want to enforce.
-->

<scalastyle>
    <name>Scruid configuration</name>

    <!-- ================================================================================ -->
    <!--                               rules we enforce                                   -->
    <!-- ================================================================================ -->

    <check level="error" class="org.scalastyle.file.FileTabChecker" enabled="true"/>

    <check level="error" class="org.scalastyle.file.HeaderMatchesChecker" enabled="true">
        <parameters>
            <parameter name="header"><![CDATA[/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */]]></parameter>
        </parameters>
    </check>

    <check level="error" class="org.scalastyle.scalariform.SpacesAfterPlusChecker" enabled="true"/>

    <check level="error" class="org.scalastyle.scalariform.SpacesBeforePlusChecker" enabled="true"/>

    <check level="error" class="org.scalastyle.file.WhitespaceEndOfLineChecker" enabled="true"/>

    <check level="error" class="org.scalastyle.file.FileLineLengthChecker" enabled="true">
        <parameters>
            <parameter name="maxLineLength"><![CDATA[120]]></parameter>
            <parameter name="tabSize"><![CDATA[2]]></parameter>
            <parameter name="ignoreImports">true</parameter>
        </parameters>
    </check>

    <check level="error" class="org.scalastyle.scalariform.ClassNamesChecker" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[[A-Z][A-Za-z]*]]></parameter>
        </parameters>
    </check>

    <check level="error" class="org.scalastyle.scalariform.ObjectNamesChecker" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[[A-Z][A-Za-z]*]]></parameter>
        </parameters>
    </check>

    <check level="error" class="org.scalastyle.scalariform.PackageObjectNamesChecker" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[^[a-z][A-Za-z]*$]]></parameter>
        </parameters>
    </check>

    <check level="error" class="org.scalastyle.scalariform.EqualsHashCodeChecker" enabled="true"/>

    <check level="error" class="org.scalastyle.scalariform.IllegalImportsChecker" enabled="true">
        <parameters>
            <parameter name="illegalImports"><![CDATA[sun._,java.awt._]]></parameter>
        </parameters>
    </check>

    <check level="error" class="org.scalastyle.scalariform.ParameterNumberChecker" enabled="true">
        <parameters>
            <parameter name="maxParameters"><![CDATA[10]]></parameter>
        </parameters>
    </check>

    <check level="error" class="org.scalastyle.scalariform.NoWhitespaceBeforeLeftBracketChecker" enabled="true"/>

    <check level="error" class="org.scalastyle.scalariform.NoWhitespaceAfterLeftBracketChecker" enabled="true"/>

    <check level="error" class="org.scalastyle.scalariform.ReturnChecker" enabled="true"/>

    <check level="error" class="org.scalastyle.scalariform.NullChecker" enabled="true">
        <parameters>
            <parameter name="allowNullChecks"><![CDATA[false]]></parameter>
        </parameters>
    </check>

    <check level="error" class="org.scalastyle.scalariform.NoCloneChecker" enabled="true"/>

    <check level="error" class="org.scalastyle.scalariform.NoFinalizeChecker" enabled="true"/>

    <check level="error" class="org.scalastyle.scalariform.CovariantEqualsChecker" enabled="true"/>

    <check level="error" class="org.scalastyle.scalariform.StructuralTypeChecker" enabled="true"/>

    <check level="error" class="org.scalastyle.scalariform.CyclomaticComplexityChecker" enabled="true">
        <parameters>
            <parameter name="maximum"><![CDATA[10]]></parameter>
            <parameter name="countCases"><![CDATA[false]]></parameter>
        </parameters>
    </check>

    <check level="error" class="org.scalastyle.scalariform.UppercaseLChecker" enabled="true"/>

    <check level="error" class="org.scalastyle.scalariform.SimplifyBooleanExpressionChecker" enabled="true"/>

    <check level="error" class="org.scalastyle.scalariform.IfBraceChecker" enabled="true">
        <parameters>
            <parameter name="singleLineAllowed"><![CDATA[true]]></parameter>
            <parameter name="doubleLineAllowed"><![CDATA[true]]></parameter>
        </parameters>
    </check>

    <check level="error" class="org.scalastyle.scalariform.MethodLengthChecker" enabled="true">
        <parameters>
            <parameter name="maxLength"><![CDATA[50]]></parameter>
            <parameter name="ignoreComments"><![CDATA[true]]></parameter>
        </parameters>
    </check>

    <check level="error" class="org.scalastyle.scalariform.MethodNamesChecker" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[^([A-Z]+|[a-z][A-Za-z0-9]*|[\+\-\*/<>]|<=|>=|===|=!=|&&|\|\||unary_!)$]]></parameter>
        </parameters>
    </check>

    <check level="error" class="org.scalastyle.scalariform.NumberOfMethodsInTypeChecker" enabled="true"/>

    <check level="error" class="org.scalastyle.scalariform.PublicMethodsHaveTypeChecker" enabled="true"/>

    <check level="error" class="org.scalastyle.file.NewLineAtEofChecker" enabled="true"/>

    <check customId="nonascii" level="error" class="org.scalastyle.scalariform.NonASCIICharacterChecker"
           enabled="true"/>

    <check level="error" class="org.scalastyle.scalariform.SpaceAfterCommentStartChecker" enabled="true"/>

    <check level="error" class="org.scalastyle.scalariform.EnsureSingleSpaceBeforeTokenChecker" enabled="true">
        <parameters>
            <parameter name="tokens">ELSE, TRY, CATCH, FINALLY, RARROW</parameter>
        </parameters>
    </check>

    <check level="error" class="org.scalastyle.scalariform.EnsureSingleSpaceAfterTokenChecker" enabled="true">
        <parameters>
            <parameter name="tokens">ARROW, EQUALS, COMMA, COLON, IF, ELSE, DO, WHILE, FOR, MATCH, TRY, CATCH, FINALLY,
                LARROW, RARROW
            </parameter>
        </parameters>
    </check>

    <check level="error" class="org.scalastyle.scalariform.NotImplementedErrorUsage" enabled="true"/>

    <check level="error" class="org.scalastyle.scalariform.ImportOrderChecker" enabled="true">
        <parameters>
            <parameter name="groups">java,scala,3rdParty</parameter>
            <parameter name="group.java">javax?\..*</parameter>
            <parameter name="group.scala">scala\..*</parameter>
        </parameters>
    </check>

    <check level="error" class="org.scalastyle.scalariform.DisallowSpaceBeforeTokenChecker" enabled="true">
        <parameters>
            <parameter name="tokens">COMMA</parameter>
        </parameters>
    </check>

    <check customId="SingleSpaceBetweenRParenAndLCurlyBrace" level="error" class="org.scalastyle.file.RegexChecker"
           enabled="true">
        <parameters>
            <parameter name="regex">\)\{</parameter>
        </parameters>
        <customMessage><![CDATA[
      Single Space between ')' and `{`.
    ]]></customMessage>
    </check>

    <check customId="NoScalaDoc" level="error" class="org.scalastyle.file.RegexChecker" enabled="true">
        <parameters>
            <parameter name="regex">(?m)^(\s*)/[*][*].*$(\r|)\n^\1 [*]</parameter>
        </parameters>
        <customMessage>Use Javadoc style indentation for multiline comments</customMessage>
    </check>

    <check customId="OmitBracesInCase" level="error" class="org.scalastyle.file.RegexChecker" enabled="true">
        <parameters>
            <parameter name="regex">case[^\n>]*=>\s*\{</parameter>
        </parameters>
        <customMessage>Omit braces in case clauses.</customMessage>
    </check>

    <check level="error" class="org.scalastyle.scalariform.OverrideJavaChecker" enabled="true"/>

    <check level="error" class="org.scalastyle.scalariform.DeprecatedJavaChecker" enabled="true"/>

    <!-- ================================================================================ -->
    <!--                               rules we don't want                                -->
    <!-- ================================================================================ -->

    <!-- We want the opposite of this: NewLineAtEofChecker -->
    <check level="error" class="org.scalastyle.file.NoNewLineAtEofChecker" enabled="false"/>

    <check level="error" class="org.scalastyle.file.FileLengthChecker" enabled="false"/>

    <check level="error" class="org.scalastyle.scalariform.NumberOfTypesChecker" enabled="false"/>

    <check level="error" class="org.scalastyle.scalariform.MagicNumberChecker" enabled="false"/>

</scalastyle>
